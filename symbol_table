%{
/*
 * Word recognizer with a symbol table.
 */

enum {
	LOOKUP = 0, /*default - looking rather than defining. */
	VERB,
	ADJ,
	ADV,
	NOUN, 
	PREP,
	PRON,
	CONJ
};

int state;

int add_word(int type, char *word);
int lookup_word(char* word);

%%
			/*end of line, retuen to default state */
\n			{state = LOOKUP;}

			/*whenever a line stars with a reserved part of speech name */
			/* start defining words of that type */
^verb		{state = VERB;}
^adj		{state = ADJ;}	
^adv		{state = ADV;}	
^noun		{state = NOUN;}	
^prep		{state = PREP;}	
^pron		{state = PRON;}	
^conj		{state = CONJ;}	

[a-zA-Z]+	{
			if(state != LOOKUP){
				/*define the current word */
				add_word(state, yytext);
			} else {
				switch(lookup_word(yytext)){
					case VERB: printf("%s" verb\n", yytext); break;
					case ADJ: printf("%s" adj\n", yytext); break;
					case ADV: printf("%s" adv\n", yytext); break;
					case NOUN: printf("%s" noun\n", yytext); break;
					case PREP: printf("%s" prep\n", yytext); break;
					case PRON: printf("%s" pron\n", yytext); break;
					case CONJ: printf("%s" conj\n", yytext); break;
					default: 
						printf("%s: dont recognize\n", yytext);
						break;
				}
			}
			}
/*ignore anything else*/

%%
main()
{
	yylex();
}
/*define a linked list of words and types */
struct word{
	char *word_name; 
	int word_type;
	struct word *next;
};

struct word *word_list; /*first element in word list*/


